??along.with
?along
nxt()
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2) times=10)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- vector(0.5,55,-10,6)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >=6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name<-c(my_char,"Lindsey")
my_name
paste(my_name)
paste(my_name, collapse(" "))
paste(my_name, collapse=" ")
paste("Hello", "world!", sep=" ")
paste(1:3,c("X", "Y", "Z"), sep ="")
paste(LETTERS,1:4, sep=-'')
paste(LETTERS,1:4, sep='-')
ls
debug(ls)
ls
ls()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(c(3,4,5))
vct <- makeVector(c(3,4,5))
cachemean(vct)
vct2 <- makeVector(c(1,2,3))
cachemean(vct2)
?<--
x = matrix()
x
my_matrix <- matrix(1:6, nrow=2, ncol=3)
my_matrix
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix(my_matrix)
solve(my_matrix)
my_matrix <- matrix(1:9, nrow=3, ncol=3)
solve(my_matrix)
?solve
my_matrix
my_matrix <- matrix(c(3,3,3,6,6,6,10,10,10), nrow=3, ncol=3)
my_matrix
solve(my_matrix)
my_matrix <- matrix(c(4,7,9,2,5,7,1,4,6), nrow=3, ncol=3)
my_matrix
solve(my_matrix)
my_matrix <- matrix(c(1,3,3,1,4,3,1,3,4), nrow=3, ncol=3)
solve(my_matrix)
my_matrix
my_matrix <- matrix(c(1,1,1,3,4,3,3,3,4), nrow=3, ncol=3)
solve(my_matrix)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
makeCacheMatrix(my_matrix)
cacheSolve(makeCacheMatrix(my_matrix))
?m
m
makeCacheMatrix(my_matrix)$i
makeCacheMatrix(my_matrix)$setinverse
cacheSolve(makeCacheMatrix(my_matrix))
debug(cacheSolve(makeCacheMatrix(my_matrix)))
debug(cacheSolve)
cacheSolve(makeCacheMatrix(my_matrix))
cacheSolve(makeCacheMatrix(my_matrix))
cache <- makeCacheMatrix(my_matrix)
cacheSolve(cache)
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10, replace=FALSE)
sample(1:20, 10)
?LETTERS
LETTERS
sample(LETTERS)
flips <- sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob=0.7)
rbinom(100,size=1,prob=0.7)
flips2 <- rbinom(100,size=1,prob=0.7)
flips2
sum(heads)
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean=100, sd=25)
?rpois
rpois(5,lambda=10)
my_pois <- replicate(100,rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = Speed, y = cars$dist)
?splot
?plot
plot(x = cars$speed, y = cars$dist, xlab="Speed")
plot(x = cars$speed, y = cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab="Speed", ylab="Stopping Distance")
?plot
plot(cars, main="My Plot")
plot?
?plot
plot(cars, sub="My Plot Subtitle")
?par
plot(cars,col=2)
plot(cars,xlim=c(10,15))
?points
plot(cars,pch=2)
data(mtcars)
play()
dim(mtcars)
head(mtcars)
summary(mtcars)
table(mtcars)
names(mtcars)
nxt()
?boxplot
boxplot(mpg ~ cyl, data=mtcars)
hist(mtcars$mpg)
fileURL <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileURL, destfile="./data/cameras.csv", method="curl") ##Have to specify this for HTTPS websites!
if (!file.exists("data")) {
dir.create("data")
}
list.files("./data")
download.file(fileURL, destfile="./data/cameras.csv", method="curl")
list.files("./data")
dateDownloaded <- data()
dateDownloaded
dateDownloaded <- date()
dateDownloaded
cameraData <- read.table("./data/cameras.csv")
cameraData <- read.table("./data/cameras.csv", sep=",", header=TRUE)
cameraData
head(cameraData)
fileURL <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.xlsx?accessType=DOWNLOAD"
downldownload.file(fileURL, destfile="./data/cameras.csv", method="curl")
download.file(fileURL, destfile="./data/cameras.csv", method="curl")
dateDownloaded <- date()
library(xlsx)
install.packages("xlsx")
library(xlsx)
install.packages("rJava")
library(xlsx)
install.packages("rJava")
setwd("/Users/lindseyhandley/Data_Science_Coursera/3_Getting_And_Cleaning_Data/Week_4/")
gdp<- read.csv("gdp.csv",skip=3)
?read.csv
gdp<- read.csv("gdp.csv",skip=3,nrows=191)
head(gdp)
tail(gdp)
gdp<- read.csv("gdp.csv",skip=3,nrows=191,ncol=5)
tail(gdp)
gdp_clean<- gdp_clean[,c(1,2,4,5)]
gdp_clean<- gdp[,c(1,2,4,5)]
head(gdp_clean)
gdp_clean<- gdp_clean[!2,]
head(gdp_clean)
gdp_clean<- gdp[,c(1,2,4,5)]
head(gdp_clean)
names(gdp_clean)
names(gdp_clean) <- c("CountryCode","Ranking","Economy","US.dollars")
names(gdp_clean)
head(gdp_clean)
gsub(",","",gdp_clean$US.dollars)
gdp_clean$US.dollars <- gsub(",","",gdp_clean$US.dollars)
head(gdp_clean)
summary(gdp_clean$US.dollars)
summary(gdp_clean)
gdp_clean$US.dollars <- as.numeric(gdp_clean$US.dollars)
summary(gdp_clean)
names(gdp_clean)
names(gdp_clean) <- c("CountryCode","Ranking","countryNames","US.dollars")
summary(gdp_clean)
grep("^United",gdp_clean$countryNames)
edu <- read.csv("edu.csv")
head(edu)
tail(edu)
mergedData = merge(gdp,edu,by.x="CountryCode",by.y="CountryCode",all=TRUE)
mergedData = merge(gdp,edu,by.x="CountryCode",by.y="CountryCode",all=TRUE)
mergedData = merge(gdp, edu, by.x="CountryCode", by.y="CountryCode",all=TRUE)
?merge
names(edu)
names(gdp)
mergedData = merge(gdp_clean, edu, by.x="CountryCode", by.y="CountryCode",all=TRUE)
head(mergedData)
str(mergedData)
mergedData = merge(gdp_clean, edu, by.x="CountryCode", by.y="CountryCode",all=FALSE)
str(mergedData)
?grep
grep("fiscal year",mergedData)
grep("Fiscal year",mergedData)
grep("Fiscal year end:",mergedData$Special.Notes)
grep("Fiscal year end:",mergedData$Special.Notes,value=TRUE)
grep("Fiscal year end: June",mergedData$Special.Notes,value=TRUE)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
str(amzn)
head(amzn)
tail(amzn)
str(sampleTimes)
?index
sampleTimes[year(sampleTimes)==2012]
?year
?years
library(lubridate)
?year
sampleTimes[year(sampleTimes)==2012]
all_2012 <- sampleTimes[year(sampleTimes)==2012]
length(all_2012)
all_2012 <- sampleTimes[year(sampleTimes)==2012 & wday(sampleTimes)==2]
length(all_2012)
ls
getwd()
setwd("/Users/lindseyhandley/Data_Science_Coursera/3_Getting_And_Cleaning_Data/Getting_and_Cleaning_Data_Course_Project/)
setwd("/Users/lindseyhandley/Data_Science_Coursera/3_Getting_And_Cleaning_Data/Getting_and_Cleaning_Data_Course_Project/)
setwd("/Users/lindseyhandley/Data_Science_Coursera/3_Getting_And_Cleaning_Data/Getting_and_Cleaning_Data_Course_Project/")
getwd()
subject_test <- read.table("./UCI HAR Dataset/test/subject_test.txt")
head(subject_test)
names(subject_test) <- c("subjectname")
head(subject_test)
summary(subject_test)
x_test <- read.table("./UCI HAR Dataset/test/X_test.txt")
head(x_test)
str(x_test)
str(subject_test)
features <- read.table("./UCI HAR Dataset/test/features.txt")
features <- read.table("./UCI HAR Dataset/features.txt")
head(features)
names(x_test)
names(x_test) <- features[,2]
names(x_test)
head(x_test)
names(x_test)
grepl("mean",names(x_test))
sum(grepl("mean",names(x_test)))
sum(grepl("std",names(x_test)))
sum(grepl("mean|std",names(x_test)))
grepl("mean|std",names(x_test))
x_test <- x_test(,grepl("mean|std",names(x_test)))
x_test <- x_test[,grepl("mean|std",names(x_test))]
summary(x_test)
str(x_test)
y_test <- read.table("./UCI HAR Dataset/test/Y_test.txt")
head(y_test)
str(y_test)
names(y_test) <- c("activities")
str(y_test)
head(y_test)
names(subject_test) <- c("subjectnumber")
head(subject_test)
library(plyr)
merged_test
merged_test <- cbind(subject_test, y_test, x_test)
head(merged_test)
str(merged_test)
activity_labels <- read.table("./UCI HAR Dataset/activity_labels.txt")
head(activity_labels)
head(y_test)
?lookUpVect
?index
?zoo
temp <- y_test[1,]
temp
y_test[1,] <- activity_labels[temp,2]
head(y_test)
y_test[1,] <- activity_labels[temp][2]
y_test[1,] <- activity_labels[temp][1]
activity_labels[temp]
activity_labels[[temp]]
activity_labels[temp]
activity_labels[temp,]
activity_labels[temp,][2]
y_test[1,] <- activity_labels[temp,][2]
head(y_test)
y_test[1,] <- activity_labels[temp,][2]
head(y_test)
str(y_test)
summary(y_test)
dcast(melt(y_test, id.vars = "rn")[activity_labels, new_value := i.V2, on = c(value = "V1")], rn ~ variable, value.var = "new_value")
library(reshape2)
dcast(melt(y_test, id.vars = "rn")[activity_labels, new_value := i.V2, on = c(value = "V1")], rn ~ variable, value.var = "new_value")
library(dplyr)
library(tidyr)
y_test %>% gather(key = "activities") %>% left_join(activity_labels, by = "V1") %>% spread(key = V1, value = V2)
y_test %>% gather(key = "activities") %>% left_join(activity_labels, by = V1) %>% spread(key = V1, value = V2)
names(activity_labels) <- c("activityid","activityname")
head(activity_labels)
head(y_test)
y_test %>% gather(key = "activities") %>% left_join(activity_labels) %>% spread(key = activityid, value = activityname)
?left_join
y_test %>% gather(key = "activityid") %>% left_join(activity_labels, by="activities") %>% spread(key = activityid, value = activityname)
head(activity_labels)
mutate(y_test,activityname = activity_labels[activities,])
mutate(y_test,activityname = y_test[activity_labels[activities,],])
mutate(y_test,activityname = activity_labels[activities,2])
y_test <- read.table("./UCI HAR Dataset/test/Y_test.txt")
names(y_test) <- c("activities")
activity_labels <- read.table("./UCI HAR Dataset/activity_labels.txt")
names(activity_labels) <- c("activityid","activityname")
library(dplyr)
y_test <- mutate(y_test,activityname = activity_labels[activities,2])
head(y_test)
names(y_test) <- c("activitynumber")
y_test <- read.table("./UCI HAR Dataset/test/Y_test.txt")
names(y_test) <- c("activitynumber")
activity_labels <- read.table("./UCI HAR Dataset/activity_labels.txt")
names(activity_labels) <- c("activityid","activityname")
y_test <- mutate(y_test,activityname = activity_labels[activities,2])
y_test <- mutate(y_test,activityname = activity_labels[activitynumber,2])
y_test <- mutate(y_test,-activitynumber)
head(y_test)
y_test <- read.table("./UCI HAR Dataset/test/Y_test.txt")
names(y_test) <- c("activitynumber")
y_test <- mutate(y_test,activityname = activity_labels[activitynumber,2])
head(y_test)
y_test_new <- select(y_test,-activitynumber)
head(y_test_new)
merged_test <- cbind(subject_test, y_test, x_test)
head(merged_test)
y_test <- select(y_test,-activitynumber)
head(y_test)
merged_test <- cbind(subject_test, y_test, x_test)
head(y_test)
head(merged_test)
subject_train <- read.table("./UCI HAR Dataset/test/subject_train.txt")
subject_train <- read.table("./UCI HAR Dataset/train/subject_train.txt")
names(subject_train) <- c("subjectnumber")
head(subject_train)
x_train <- read.table("./UCI HAR Dataset/train/X_train.txt")
features <- read.table("./UCI HAR Dataset/features.txt")
names(x_train) <- features[,2]
x_train <- x_train[,grepl("mean|std",names(x_train))]
head(x_train)
str(x_train)
y_train <- read.table("./UCI HAR Dataset/train/Y_train.txt")
names(y_train) <- c("activitynumber")
activity_labels <- read.table("./UCI HAR Dataset/activity_labels.txt")
names(activity_labels) <- c("activityid","activityname")
y_train <- mutate(y_train,activityname = activity_labels[activitynumber,2])
y_train <- select(y_train,-activitynumber)
merged_train <- cbind(subject_train, y_train, x_train)
head(merged_train)
all_data <- rbind(merged_test,merged_train)
head(all_data)
str(all_data)
str(merged_test)
str(merged_train)
all_data[all_data$subjectnumber==1,]
str(all_data[all_data$subjectnumber==1,])
tolower(names(all_data))
head(all_data)
names(all_data) <- tolower(names(all_data))
head(all_data)
?sub
sub("-","", names(all_data))
gsub("-","", names(all_data))
gsub("\\()","", names(all_data))
sub("^f","freq", names(all_data))
sub("^t","time", names(all_data))
names(all_data) <- gsub("-","", names(all_data))
names(all_data) <- gsub("\\()","", names(all_data))
names(all_data) <- sub("^f","freq", names(all_data))
names(all_data) <- sub("^t","time", names(all_data))
names(all_data)
head(all_data)
meltData <- melt()sumData <- dcast(all_data, subjectnumber ~ activityname)
sumData <- dcast(all_data, subjectnumber ~ activityname)
sumData <- dcast(all_data, subjectnumber ~ activityname, mean)
sumData
group_by(all_data,subjectnumber)
group_by(all_data,activityname)
all_data_subj <- group_by(all_data,subjectnumber)
all_data_activity <- group_by(all_data,activityname)
?summarize_each
summarize_each(all_data,mean,subjectnumber,activityname)
summarize_each_(all_data,mean,subjectnumber,activityname)
summarize_each(all_data,mean,all_data_subj,all_data_activity)
dataMelt <- melt(all_data, measure.vars = c("subjectnumber","activityname"))
head(dataMelt)
castData <- dcast(all_data, subjectname ~ activityname)
?dcast
castData <- dcast(all_data, subjectname ~ ..., mean)
castData <- dcast(all_data, subjectnumber ~ ..., mean)
head(castData)
split(all_data$subjectnumber,all_data$activityname)
split(all_data$subjectnumber,all_data$activityname)
dataMeans <- ddply(all_data,.(subjectnumber),summarize,mean=ave(activityname,FUN=mean))
?summarize
subj_grouped <- group_by(all_data)
summarize(subj_grouped)
subj_grouped
summarize(subj_grouped,mean())
summarize(subj_grouped,mean
)
meltData <- melt(all_data, id.vars = c("subjectnumber", "activityname"))
head(meltData)
str(meltData)
dcast(all_data, subjectnumber + activityname ~ variable, fun.aggregate = mean,
na.rm = TRUE)
castData <- dcast(meltData, subjectnumber + activityname ~ variable)
castData <- dcast(meltData, subjectnumber + activityname ~ variable, fun.aggregate = mean)
head(castData)
head(castData,n=12)
str(castData)
?write.table
if (!file.exists("Tidy Datasets")) {
dir.create("Tidy Datasets")
}
write.table(all_data,"Tidy Datasets/all-data.txt")
write.csv(all_data,"Tidy Datasets/all-data.csv")
write.csv(tidy_data,"Tidy Datasets/averaged-data.csv")
write.csv(tidyData,"Tidy Datasets/averaged-data.csv")
melt_data <- melt(all_data, id.vars = c("subjectnumber", "activityname"))
tidy_data <- dcast(melt_data, subjectnumber + activityname ~ variable, fun.aggregate = mean)
if (!file.exists("Tidy Datasets")) {
dir.create("Tidy Datasets")
}
write.csv(tidy_data,"Tidy Datasets/averaged-data.csv")
source("run_analysis.R")
source("run_analysis.R")
